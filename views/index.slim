doctype html
html
  head
    meta charset="utf-8"
    title AMazeInn Back
    meta name="robots" content="noindex,nofollow"
    link rel="icon" type="image/png" href="images/favicon.png"
    link rel="stylesheet" href="https://unpkg.com/element-ui/lib/theme-chalk/index.css"
    script src="https://cdn.jsdelivr.net/npm/vue"
    script src="https://unpkg.com/element-ui/lib/index.js"
    script src="https://unpkg.com/axios/dist/axios.min.js"
    /[if lt IE 9]
      script src="http://html5shiv.googlecode.com/svn/trunk/html5.js"
  body style="display: flex; flex-flow: column; min-height: 100vh"
    div id="app" style="flex: 1"
      div id="header" style="text-align: center; margin-top: 5%"
        <el-badge :value="'...'">
          <el-button size="medium" type="info" plain @click="visible = true">AMazeInn Back</el-button>
        </el-badge>
      <div v-if="!isLogedIn" style="text-align: center; margin-top: 5%; margin-left: 40%">
        <el-row>
          <el-col :span="8">
            <el-form :model="cred" label-width="100px">
              <el-form-item label="Account">
                <el-input v-model="cred.account" placeholder="Input your account" autocomplete="off"></el-input>
              </el-form-item>
              <el-form-item label="Password">
                <el-input type="password" v-model="cred.password" placeholder="Input your password" autocomplete="off"></el-input>
              </el-form-item>
              <el-form-item>
                <el-button type="primary" @click="login" style="width:100%">Login</el-button>
              </el-form-item>
            </el-form>
          </el-col>
        </el-row>
      </div>
      <div v-if="isLogedIn" style="margin-top: 2%">
        <el-row style="text-align: center; margin-left: 40%">
          <el-col :span="8">
            span Admin: LogedIn&nbsp;&nbsp;
            <span>
              <el-button type="primary" @click="logout">Logout</el-button>
            </span>
          </el-col>
        </el-row>
        <el-row style="margin-left: 33%">
          <el-col :span="16">
            <el-form :inline="true" style="padding-top: 30px">
              <el-form-item label="Drop Schema">
                <el-select v-model="schema" placeholder="Choose">
                  <el-option v-for="item in schemaList" :key="item" :label="item" :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-button type="primary" @click="dropFunc">Drop</el-button>
            </el-form>
          </el-col>
        </el-row>
        <el-row style="margin-left: 24%">
          <el-col :span="20">
            <el-form :inline="true" style="padding-top: 10px">
              <el-form-item label="System Init">
                <el-select v-model="init.type" placeholder="Choose">
                  <el-option v-for="item in initList" :key="item" :label="item" :value="item">
                  </el-option>
                </el-select>
              </el-form-item>
              <el-form-item>
                <el-input type="number" v-model="init.amount" placeholder="Amount"></el-input>
              </el-form-item>
              <el-button type="primary" @click="initFunc">Init</el-button>
            </el-form>
          </el-col>
        </el-row>
        <el-table :data="guests" style="width: 100%; margin-left: 20%">
          <el-table-column fixed prop="_id" label="ID" width="100">
          </el-table-column><el-table-column fixed prop="name" label="Name" width="100">
          </el-table-column><el-table-column fixed prop="gender" label="Gender" width="100">
          </el-table-column><el-table-column fixed prop="created_on" label="Created On" width="250">
          </el-table-column><el-table-column fixed label="Edit" width="100">
            <template slot-scope="scope">
              <i class="el-icon-edit" @click="editDialogVisible = true" style="color: blue;cursor: pointer"></i>
            </template>
          </el-table-column>
          <el-table-column fixed label="Delete" width="100">
            <template slot-scope="scope">
              <i class="el-icon-delete" @click="deleteDialogVisible = true" style="color: red;cursor: pointer"></i>
            </template>
          </el-table-column>
        </el-table>
        <el-dialog title="Attention" :visible.sync="deleteDialogVisible" width="30%">
          <span>Are you sure to delete？</span>
          <span slot="footer" class="dialog-footer">
            <el-button @click="deleteDialogVisible = false">Cancel</el-button>
            <el-button type="primary" @click="deleteDialogVisible = false,deleteFunc()">Delete</el-button>
          </span>
        </el-dialog>
        <el-dialog title="Attention" :visible.sync="editDialogVisible" width="30%">
          <span>Are you sure to edit？</span>
          <span slot="footer" class="dialog-footer">
            <el-button @click="editDialogVisible = false">Cancel</el-button>
            <el-button type="primary" @click="editDialogVisible = false,editFunc()">Edit</el-button>
          </span>
        </el-dialog>
      </div>
      p id="hiden" style="display:none"
        | #{@isLogedIn}
      <el-dialog :visible.sync="visible" title="Brief Summary">
        p #{@brief_guests}
        p #{@brief_messages}
        p #{@brief_contacts}
        p #{@brief_thumbs}
        p #{@brief_rooms}
      </el-dialog>
    div id="footer" style="text-align: center; color: gray"
      Copyright © 2018 calberoc/kousai (version 0.1)

  javascript:
    new Vue({
      el: '#app',

      data() {
        return {
          cred: {
            account: '',
            password: ''
          },
          init: {
            type: 'mock',
            amount: 0
          },
          initList: ['random', 'room', 'mock'],
          schema: 'Guest',
          schemaList: ['Guest', 'Message', 'Contact', 'Thumb', 'Room'],
          guests: [],
          messages: [],
          contacts: [],
          thumbs: [],
          rooms: [],
          isLogedIn: false,
          visible: false,
          deleteDialogVisible: false,
          editDialogVisible: false
        }
      },

      mounted() {
        this.checkLogin()
      },

      methods: {
        login () {
          if(this.cred.account == '' || this.cred.password == '') {
						this.$message({
							message: 'Account or Password required！',
							type: 'error'
						})
						return
					}
          axios.post('/admin/login', {
            account: this.cred.account,
            password: this.cred.password
          })
          .then((response) => {
            this.isLogedIn = true
            this.guests = response.data.guests
            this.messages = response.data.messages
            this.contacts = response.data.contacts
            this.thumbs = response.data.thumbs
            this.rooms = response.data.rooms
            this.$message({
							message: 'Login successful！',
							type: 'success'
						})
          })
          .catch((error) => {
            this.$message({
							message: 'Incorrect Account or Password！',
							type: 'error'
						})
          })
        },

        logout () {
          axios.post('/admin/logout', {})
          .then((response) => {
            this.cred.account = ''
            this.cred.password = ''
            this.isLogedIn = false
            this.$message({
							message: 'Logout successful！',
							type: 'success'
						})
          })
          .catch((error) => {
            this.$message({
							message: 'Failed to Logout！',
							type: 'error'
						})
          })
        },

        checkLogin () {
          const hiden = document.getElementById('hiden')
          this.isLogedIn = (hiden.innerText === 'true')
          if (this.isLogedIn) {
            axios.post('/admin/refresh', {})
          .then((response) => {
            this.guests = response.data.guests
            this.messages = response.data.messages
            this.contacts = response.data.contacts
            this.thumbs = response.data.thumbs
            this.rooms = response.data.rooms
          })
          .catch((error) => {
            this.$message({
							message: 'Failed！',
							type: 'error'
						})
          })
          }
        },

        dropFunc () {
          axios.post('/admin/drop', {
            schema: this.schema
          })
          .then((response) => {
            this.$message({
							message: 'Drop successful！',
							type: 'success'
						})
          })
          .catch((error) => {
            this.$message({
							message: 'Failed to Drop！',
							type: 'error'
						})
          })
        },

        initFunc () {
          axios.post('/admin/init', {
            type: this.init.type,
            amount: Number(this.init.amount)
          })
          .then((response) => {
            this.$message({
							message: 'Init successful！',
							type: 'success'
						})
          })
          .catch((error) => {
            this.$message({
							message: 'Failed to Init！',
							type: 'error'
						})
          })
        },

        editFunc () {
          this.$message({
							message: 'In progress... Nothing happened！',
							type: 'error'
						})
        },

        deleteFunc () {
          this.$message({
							message: 'In progress... Nothing happened！',
							type: 'error'
						})
        }
      }
    })
